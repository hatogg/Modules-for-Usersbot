__version__ = (1, 4, 0)

import aiohttp
import logging
import time
from telethon import events
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class AlertsUa(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –≤ –£–∫—Ä–∞—ó–Ω—ñ. –ê–≤—Ç–æ—Ä: X44TO (t.me/devx44to)"""

    strings = {
        "name": "AlertsUa by X44TO",
        "_cls_doc": "–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –≤ –£–∫—Ä–∞—ó–Ω—ñ. –ê–≤—Ç–æ—Ä: X44TO (t.me/devx44to)",
        "no_token": "‚ùå <b>API —Ç–æ–∫–µ–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>.settoken [—Ç–æ–∫–µ–Ω]</code>",
        "checking": "üîÑ <b>–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ç—Ä–∏–≤–æ–≥–∏...</b>",
        "no_alerts": "‚úÖ <b>–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥.</b>",
        "active_alerts": "üîî <b>–ê–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ (–æ–Ω–æ–≤–ª–µ–Ω–æ –æ {time}):</b>\n\n{list}",
        "alert_item": "üìç {location}\n   üïê –ü–æ—á–∞—Ç–æ–∫: {started_at}\n   üìù –ü—Ä–∏—á–∏–Ω–∞: {notes}\n   –¢–∏–ø: {type}",
        "status_oblast": "üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö:</b>\n{status}",
        "status_item": "üìç {oblast}: {status}",
        "specific_status": "üìç <b>–°—Ç–∞—Ç—É—Å –¥–ª—è {location}:</b> {status}",
        "history": "üìú <b>–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∏–≤–æ–≥ –∑–∞ –º—ñ—Å—è—Ü—å –¥–ª—è {location}:</b>\n\n{list}",
        "history_item": "üîî {started_at} - {finished_at or '–¢—Ä–∏–≤–∞—î'} ({type})",
        "error": "‚ùå <b>–ü–æ–º–∏–ª–∫–∞: {error}</b>",
        "set_token": "‚úÖ <b>–¢–æ–∫–µ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.</b>",
        "invalid_uid": "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π UID –∞–±–æ –Ω–∞–∑–≤–∞ –æ–±–ª–∞—Å—Ç—ñ.</b>",
        "using_cache": "‚ÑπÔ∏è <b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ.</b>",
        "start_alerts": "‚ñ∂Ô∏è <b>–†–æ–∑–ø–æ—á–∞—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥ –∫–æ–∂–Ω—ñ —Ö–≤–∏–ª–∏–Ω—É.</b>",
        "stop_alerts": "‚èπÔ∏è <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥ –∑—É–ø–∏–Ω–µ–Ω–æ.</b>",
        "already_running": "‚ÑπÔ∏è <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.</b>",
        "not_running": "‚ÑπÔ∏è <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.</b>",
        "alert_init_failed": "‚ùå <b>–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥.</b>"
    }

    def __init__(self):
        self.token = None
        self.oblasts = [
            "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º", "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"
        ]
        self.uid_map = {name: i+1 for i, name in enumerate(self.oblasts)}
        self.cache = {}  # {endpoint: {"data": data, "timestamp": time}}
        self.cache_ttl = 300  # 5 —Ö–≤–∏–ª–∏–Ω
        self.alert_task = None
        self.alert_msg_id = None
        self.alert_chat_id = None

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.token = self.get("token", None)
        logger.info("–ú–æ–¥—É–ª—å AlertsUa —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        if not self.token:
            logger.warning("–¢–æ–∫–µ–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            await utils.answer(self, self.strings["no_token"])

    def get_cached(self, endpoint: str):
        if endpoint in self.cache:
            cached = self.cache[endpoint]
            if time.time() - cached["timestamp"] < self.cache_ttl:
                logger.debug(f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à –¥–ª—è {endpoint}")
                return cached["data"]
            else:
                logger.debug(f"–ö–µ—à –¥–ª—è {endpoint} –∑–∞—Å—Ç–∞—Ä—ñ–≤, –≤–∏–¥–∞–ª–µ–Ω–æ")
                del self.cache[endpoint]
        return None

    async def api_request(self, endpoint: str):
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
            return None
        cached = self.get_cached(endpoint)
        if cached is not None:
            logger.info(f"–ü–æ–≤–µ—Ä–Ω—É—Ç–æ –∫–µ—à –¥–ª—è {endpoint}")
            await utils.answer(self, self.strings["using_cache"])
            return cached

        logger.debug(f"–í–∏–∫–æ–Ω—É—é –∑–∞–ø–∏—Ç –¥–æ {endpoint}")
        url = f"https://api.alerts.in.ua{endpoint}?token={self.token}"
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url) as resp:
                    logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ {url} –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º {resp.status}")
                    if resp.status == 200:
                        data = await resp.json()
                        self.cache[endpoint] = {"data": data, "timestamp": time.time()}
                        logger.info(f"–£—Å–ø—ñ—à–Ω–æ –∫–µ—à–æ–≤–∞–Ω–æ –¥–∞–Ω—ñ –¥–ª—è {endpoint}")
                        return data
                    elif resp.status == 429:
                        logger.warning(f"–õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –¥–ª—è {endpoint}")
                        return {"error": "–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤"}
                    else:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ HTTP {resp.status} –¥–ª—è {endpoint}")
                        return {"error": f"HTTP {resp.status}"}
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ API –¥–ª—è {endpoint}: {e}")
                return {"error": str(e)}

    async def get_active_alerts(self):
        data = await self.api_request("/v1/alerts/active.json")
        if "error" in data:
            return data
        return data.get("alerts", [])

    async def get_oblasts_status(self):
        data = await self.api_request("/v1/iot/active_air_raid_alerts_by_oblast.json")
        if "error" in data or isinstance(data, str):
            return data
        status_str = data
        status_map = {}
        for i, status in enumerate(status_str):
            oblast = self.oblasts[i]
            status_desc = {"A": "üîî –ê–∫—Ç–∏–≤–Ω–∞", "P": "‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–∞", "N": "‚úÖ –ù–µ–º–∞—î"}.get(status, "‚ùì –ù–µ–≤—ñ–¥–æ–º–æ")
            status_map[oblast] = status_desc
        self.cache["/v1/iot/active_air_raid_alerts_by_oblast.json"] = {"data": status_map, "timestamp": time.time()}
        logger.debug(f"–û–±—Ä–æ–±–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö: {len(status_map)} –∑–∞–ø–∏—Å—ñ–≤")
        return status_map

    async def get_specific_status(self, uid: str):
        data = await self.api_request(f"/v1/iot/active_air_raid_alerts/{uid}.json")
        if "error" in data or isinstance(data, str):
            return data
        status = data
        status_desc = {"A": "üîî –ê–∫—Ç–∏–≤–Ω–∞", "P": "‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–∞", "N": "‚úÖ –ù–µ–º–∞—î"}.get(status, "‚ùì –ù–µ–≤—ñ–¥–æ–º–æ")
        self.cache[f"/v1/iot/active_air_raid_alerts/{uid}.json"] = {"data": status_desc, "timestamp": time.time()}
        logger.debug(f"–°—Ç–∞—Ç—É—Å –¥–ª—è UID {uid}: {status_desc}")
        return status_desc

    async def get_history(self, uid: str):
        data = await self.api_request(f"/v1/regions/{uid}/alerts/month_ago.json")
        if "error" in data:
            return data
        return data.get("alerts", [])

    async def update_alerts(self):
        logger.info("–†–æ–∑–ø–æ—á–∞—Ç–æ —Ü–∏–∫–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥")
        while True:
            if not self.token or not self.alert_chat_id or not self.alert_msg_id:
                logger.error("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥")
                await self.client.send_message(self.alert_chat_id or (await self.client.get_me()).id, self.strings["alert_init_failed"])
                break
            try:
                alerts = await self.get_active_alerts()
                logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏: {len(alerts)} –∑–∞–ø–∏—Å—ñ–≤")
                if isinstance(alerts, dict) and "error" in alerts:
                    await self.client.edit_message(self.alert_chat_id, self.alert_msg_id, self.strings["error"].format(error=alerts["error"]))
                elif not alerts:
                    await self.client.edit_message(self.alert_chat_id, self.alert_msg_id, self.strings["no_alerts"])
                else:
                    alert_list = "\n\n".join([
                        self.strings["alert_item"].format(
                            location=item["location_title"],
                            started_at=item["started_at"][11:16] if item["started_at"] else "–ù–µ–≤—ñ–¥–æ–º–æ",
                            notes=item.get("notes", "–ù–µ–º–∞—î"),
                            type={"air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞", "artillery_shelling": "–ê—Ä—Ç–∏–ª–µ—Ä—ñ–π—Å—å–∫–∏–π –æ–±—Å—Ç—Ä—ñ–ª", "urban_fights": "–ú—ñ—Å—å–∫—ñ –±–æ—ó", "chemical": "–•—ñ–º—ñ—á–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞", "nuclear": "–Ø–¥–µ—Ä–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞"}.get(item["alert_type"], item["alert_type"])
                        ) for item in alerts
                    ])
                    current_time = time.strftime("%H:%M", time.localtime())
                    text = self.strings["active_alerts"].format(list=alert_list, time=current_time)
                    await self.client.edit_message(self.alert_chat_id, self.alert_msg_id, text)
                    logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ —Ç—Ä–∏–≤–æ–≥–∏ –æ {current_time}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥: {e}")
                await self.client.send_message(self.alert_chat_id, f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}</b>")
                break
            await asyncio.sleep(60)

    @loader.command()
    async def settoken(self, message):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î API —Ç–æ–∫–µ–Ω. –ê—Ä–≥—É–º–µ–Ω—Ç: [—Ç–æ–∫–µ–Ω]"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_token"])
            logger.warning("–°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—É")
            return
        self.token = args.strip()
        self.set("token", self.token)
        logger.info("–¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        await utils.answer(message, self.strings["set_token"])

    @loader.command()
    async def alerts(self, message):
        """–ü–æ–∫–∞–∑—É—î –∞–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏."""
        if not self.token:
            await utils.answer(message, self.strings["no_token"])
            logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω")
            return
        await utils.answer(message, self.strings["checking"])
        logger.debug("–ü–æ—á–∞—Ç–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥")
        alerts = await self.get_active_alerts()
        if isinstance(alerts, dict) and "error" in alerts:
            await utils.answer(message, self.strings["error"].format(error=alerts["error"]))
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ API: {alerts['error']}")
            return
        if not alerts:
            await utils.answer(message, self.strings["no_alerts"])
            logger.info("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥")
            return
        alert_list = "\n\n".join([
            self.strings["alert_item"].format(
                location=item["location_title"],
                started_at=item["started_at"][11:16] if item["started_at"] else "–ù–µ–≤—ñ–¥–æ–º–æ",
                notes=item.get("notes", "–ù–µ–º–∞—î"),
                type={"air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞", "artillery_shelling": "–ê—Ä—Ç–∏–ª–µ—Ä—ñ–π—Å—å–∫–∏–π –æ–±—Å—Ç—Ä—ñ–ª", "urban_fights": "–ú—ñ—Å—å–∫—ñ –±–æ—ó", "chemical": "–•—ñ–º—ñ—á–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞", "nuclear": "–Ø–¥–µ—Ä–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞"}.get(item["alert_type"], item["alert_type"])
            ) for item in alerts
        ])
        current_time = time.strftime("%H:%M", time.localtime())
        text = self.strings["active_alerts"].format(list=alert_list, time=current_time)
        msg = await utils.answer(message, text)
        self.alert_msg_id = msg.id
        self.alert_chat_id = message.chat_id
        logger.debug(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ ID {self.alert_msg_id}")

    @loader.command()
    async def startalerts(self, message):
        """–ó–∞–ø—É—Å–∫–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥ –∫–æ–∂–Ω—ñ —Ö–≤–∏–ª–∏–Ω—É –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ."""
        if not self.token:
            await utils.answer(message, self.strings["no_token"])
            logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
            return
        if self.alert_task and not self.alert_task.done():
            await utils.answer(message, self.strings["already_running"])
            logger.info("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        await utils.answer(message, self.strings["checking"])
        logger.debug("–ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥")
        alerts = await self.get_active_alerts()
        if isinstance(alerts, dict) and "error" in alerts:
            await utils.answer(message, self.strings["error"].format(error=alerts["error"]))
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ API –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ: {alerts['error']}")
            return
        alert_list = "\n\n".join([
            self.strings["alert_item"].format(
                location=item["location_title"],
                started_at=item["started_at"][11:16] if item["started_at"] else "–ù–µ–≤—ñ–¥–æ–º–æ",
                notes=item.get("notes", "–ù–µ–º–∞—î"),
                type={"air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞", "artillery_shelling": "–ê—Ä—Ç–∏–ª–µ—Ä—ñ–π—Å—å–∫–∏–π –æ–±—Å—Ç—Ä—ñ–ª", "urban_fights": "–ú—ñ—Å—å–∫—ñ –±–æ—ó", "chemical": "–•—ñ–º—ñ—á–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞", "nuclear": "–Ø–¥–µ—Ä–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞"}.get(item["alert_type"], item["alert_type"])
            ) for item in alerts
        ]) if alerts else self.strings["no_alerts"]
        current_time = time.strftime("%H:%M", time.localtime())
        text = self.strings["active_alerts"].format(list=alert_list, time=current_time)
        msg = await utils.answer(message, text)
        self.alert_msg_id = msg.id
        self.alert_chat_id = message.chat_id
        self.alert_task = asyncio.create_task(self.update_alerts())
        logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {self.alert_msg_id}")
        await utils.answer(message, self.strings["start_alerts"])

    @loader.command()
    async def stopalerts(self, message):
        """–ó—É–ø–∏–Ω—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥."""
        if not self.alert_task or self.alert_task.done():
            await utils.answer(message, self.strings["not_running"])
            logger.info("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        try:
            logger.debug("–°–ø—Ä–æ–±–∞ –∑—É–ø–∏–Ω–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥")
            self.alert_task.cancel()
            await asyncio.sleep(0.1)  # –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            self.alert_task = None
            self.alert_msg_id = None
            self.alert_chat_id = None
            logger.info("–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")
            await utils.answer(message, self.strings["stop_alerts"])
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
            await utils.answer(message, self.strings["error"].format(error="–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—É–ø–∏–Ω–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"))

    @loader.command()
    async def oblasts(self, message):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≤–æ–≥ –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö."""
        if not self.token:
            await utils.answer(message, self.strings["no_token"])
            logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω")
            return
        await utils.answer(message, self.strings["checking"])
        logger.debug("–û—Ç—Ä–∏–º—É—é —Å—Ç–∞—Ç—É—Å –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö")
        status = await self.get_oblasts_status()
        if isinstance(status, dict) and "error" in status:
            await utils.answer(message, self.strings["error"].format(error=status["error"]))
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ API: {status['error']}")
            return
        status_list = "\n".join([
            self.strings["status_item"].format(oblast=oblast, status=status_desc)
            for oblast, status_desc in status.items()
        ])
        text = self.strings["status_oblast"].format(status=status_list)
        await utils.answer(message, text)
        logger.debug("–°—Ç–∞—Ç—É—Å –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ")

    @loader.command()
    async def alertstatus(self, message):
        """–°—Ç–∞—Ç—É—Å —Ç—Ä–∏–≤–æ–≥–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ. –ê—Ä–≥—É–º–µ–Ω—Ç: [UID –∞–±–æ –Ω–∞–∑–≤–∞ –æ–±–ª–∞—Å—Ç—ñ]"""
        args = utils.get_args_raw(message).strip()
        if not args:
            await utils.answer(message, "‚ùå <b>–í–∫–∞–∂–∏ UID –∞–±–æ –Ω–∞–∑–≤—É –æ–±–ª–∞—Å—Ç—ñ.</b>")
            logger.warning("–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è alertstatus")
            return
        if not self.token:
            await utils.answer(message, self.strings["no_token"])
            logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω")
            return
        await utils.answer(message, self.strings["checking"])
        logger.debug(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è {args}")
        uid = None
        try:
            uid = str(int(args))
        except ValueError:
            for name, u in self.uid_map.items():
                if args.lower() in name.lower():
                    uid = str(u)
                    break
        if not uid:
            await utils.answer(message, self.strings["invalid_uid"])
            logger.warning(f"–ù–µ–≤—ñ—Ä–Ω–∏–π UID –∞–±–æ –Ω–∞–∑–≤–∞: {args}")
            return
        status = await self.get_specific_status(uid)
        if isinstance(status, dict) and "error" in status:
            await utils.answer(message, self.strings["error"].format(error=status["error"]))
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ API –¥–ª—è UID {uid}: {status['error']}")
            return
        location_name = next((name for name in self.oblasts if args.lower() in name.lower()), "–û–±–ª–∞—Å—Ç—å")
        text = self.strings["specific_status"].format(location=location_name, status=status)
        await utils.answer(message, text)
        logger.debug(f"–°—Ç–∞—Ç—É—Å –¥–ª—è {location_name}: {status}")

    @loader.command()
    async def alerthistory(self, message):
        """–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∏–≤–æ–≥ –∑–∞ –º—ñ—Å—è—Ü—å. –ê—Ä–≥—É–º–µ–Ω—Ç: [UID –∞–±–æ –Ω–∞–∑–≤–∞ –æ–±–ª–∞—Å—Ç—ñ]"""
        args = utils.get_args_raw(message).strip()
        if not args:
            await utils.answer(message, "‚ùå <b>–í–∫–∞–∂–∏ UID –∞–±–æ –Ω–∞–∑–≤—É –æ–±–ª–∞—Å—Ç—ñ.</b>")
            logger.warning("–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è alerthistory")
            return
        if not self.token:
            await utils.answer(message, self.strings["no_token"])
            logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω")
            return
        await utils.answer(message, self.strings["checking"])
        logger.debug(f"–û—Ç—Ä–∏–º—É—é —ñ—Å—Ç–æ—Ä—ñ—é –¥–ª—è {args}")
        uid = None
        try:
            uid = str(int(args))
        except ValueError:
            for name, u in self.uid_map.items():
                if args.lower() in name.lower():
                    uid = str(u)
                    break
        if not uid:
            await utils.answer(message, self.strings["invalid_uid"])
            logger.warning(f"–ù–µ–≤—ñ—Ä–Ω–∏–π UID –∞–±–æ –Ω–∞–∑–≤–∞: {args}")
            return
        history = await self.get_history(uid)
        if isinstance(history, dict) and "error" in history:
            await utils.answer(message, self.strings["error"].format(error=history["error"]))
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ API –¥–ª—è UID {uid}: {history['error']}")
            return
        if not history:
            await utils.answer(message, "üìú <b>–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.</b>")
            logger.info(f"–Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è {uid} –ø–æ—Ä–æ–∂–Ω—è")
            return
        location_name = next((name for name in self.oblasts if args.lower() in name.lower()), "–û–±–ª–∞—Å—Ç—å")
        history_list = "\n".join([
            self.strings["history_item"].format(
                started_at=item["started_at"][:16],
                finished_at=item["finished_at"][:16] if item["finished_at"] else "–¢—Ä–∏–≤–∞—î",
                type={"air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞", "artillery_shelling": "–û–±—Å—Ç—Ä—ñ–ª", "urban_fights": "–ú—ñ—Å—å–∫—ñ –±–æ—ó", "chemical": "–•—ñ–º—ñ—á–Ω–∞", "nuclear": "–Ø–¥–µ—Ä–Ω–∞"}.get(item["alert_type"], item["alert_type"])
            ) for item in history
        ])
        text = self.strings["history"].format(location=location_name, list=history_list)
        await utils.answer(message, text)
        logger.debug(f"–Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è {location_name} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∞")

    def config(self):
        return {"token": None}