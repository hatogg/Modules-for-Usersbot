__version__ = (1, 1, 0)

import aiohttp
import logging
from telethon import events
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class SteamDiscounts(loader.Module):
    """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –≤ Steam (–£–∫—Ä–∞—ó–Ω–∞, UAH). –ê–≤—Ç–æ—Ä: X44TO (t.me/devx44to)"""

    strings = {
        "name": "SteamDiscounts by X44TO",
        "_cls_doc": "–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –≤ Steam (–£–∫—Ä–∞—ó–Ω–∞, UAH). –ê–≤—Ç–æ—Ä: X44TO (t.me/devx44to)",
        "no_discounts": "‚ÑπÔ∏è <b>–ù–µ–º–∞—î —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –Ω–∞—Ä–∞–∑—ñ.</b>",
        "error": "‚ùå <b>–ü–æ–º–∏–ª–∫–∞: {error}</b>",
        "checking": "üîÑ <b>–ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–Ω–∏–∂–∫–∏...</b>",
        "discount_list": "üõí <b>–Ü–≥—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ (–£–∫—Ä–∞—ó–Ω–∞, –¥–æ 10):</b>\n\n{list}",
        "no_results": "‚ùå <b>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º.</b>",
        "specific_discount": "üõí <b>–ó–Ω–∏–∂–∫–∞ –Ω–∞ {name}:</b>\nüí∞ –ë–µ–∑ –∑–Ω–∏–∂–∫–∏: {original_price:.2f} –≥—Ä–Ω\nüí∏ –ó—ñ –∑–Ω–∏–∂–∫–æ—é: {final_price:.2f} –≥—Ä–Ω\nüìâ –ó–Ω–∏–∂–∫–∞: {discount_percent}%\nüîó https://store.steampowered.com/app/{appid}"
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    async def get_popular_games(self):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏."""
        async with aiohttp.ClientSession() as session:
            url = "https://store.steampowered.com/api/featured?cc=ua&l=ukrainian"
            try:
                async with session.get(url) as resp:
                    if resp.status != 200:
                        logger.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Steam API")
                        return []
                    data = await resp.json()
                    appids = [str(game["id"]) for game in data.get("featured_win", []) if game.get("discount_percent", 0) > 0]
                    return appids[:10]  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ 10 —ñ–≥–æ—Ä
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ API: {e}")
                return []

    async def get_game_details(self, appid: str):
        """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—ñ –≥—Ä–∏, –≤–∫–ª—é—á–∞—é—á–∏ –∂–∞–Ω—Ä–∏."""
        async with aiohttp.ClientSession() as session:
            url = f"https://store.steampowered.com/api/appdetails?appids={appid}&cc=ua"
            try:
                async with session.get(url) as resp:
                    if resp.status != 200:
                        return None
                    data = await resp.json()
                    game_data = data.get(appid, {}).get("data", {})
                    if game_data and "price_overview" in game_data and game_data.get("discount_percent", 0) > 0:
                        price_overview = game_data["price_overview"]
                        genres = ", ".join([genre["description"] for genre in game_data.get("genres", [])]) or "Unknown"
                        return {
                            "name": game_data.get("name", "Unknown"),
                            "original_price": price_overview.get("initial", 0) / 100,
                            "final_price": price_overview.get("final", 0) / 100,
                            "discount_percent": game_data.get("discount_percent", 0),
                            "appid": appid,
                            "genres": genres
                        }
                    return None
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó –≥—Ä–∏ {appid}: {e}")
                return None

    async def get_games_by_genre(self, genre: str, appids: list):
        """–§—ñ–ª—å—Ç—Ä—É—î —ñ–≥—Ä–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º."""
        details = await asyncio.gather(*(self.get_game_details(appid) for appid in appids))
        return [game for game in details if game and genre.lower() in game["genres"].lower()][:10]

    @loader.command()
    async def discounts(self, message):
        """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ (–¥–æ 10). –ê—Ä–≥—É–º–µ–Ω—Ç: [–∂–∞–Ω—Ä, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 'RPG' –∞–±–æ 'Action']"""
        args = utils.get_args_raw(message).strip()
        await utils.answer(message, self.strings["checking"])
        appids = await self.get_popular_games()
        if not appids:
            await utils.answer(message, self.strings["no_discounts"])
            return

        if args:
            genre = args
            games = await self.get_games_by_genre(genre, appids)
        else:
            games = await asyncio.gather(*(self.get_game_details(appid) for appid in appids))
            games = [game for game in games if game][:10]

        if not games:
            await utils.answer(message, self.strings["no_discounts"])
            return

        discount_list = "\n".join([
            f"‚Ä¢ {game['name']} ({game['genres']})\n"
            f"   üí∞ –ë–µ–∑ –∑–Ω–∏–∂–∫–∏: {game['original_price']:.2f} –≥—Ä–Ω\n"
            f"   üí∏ –ó—ñ –∑–Ω–∏–∂–∫–æ—é: {game['final_price']:.2f} –≥—Ä–Ω\n"
            f"   üìâ –ó–Ω–∏–∂–∫–∞: {game['discount_percent']}%\n"
            f"   üîó https://store.steampowered.com/app/{game['appid']}"
            for game in games
        ])
        text = self.strings["discount_list"].format(list=discount_list)
        await utils.answer(message, text, parse_mode="HTML")

    @loader.command()
    async def discount(self, message):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–Ω–∏–∂–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≥—Ä—É. –ê—Ä–≥—É–º–µ–Ω—Ç: [–Ω–∞–∑–≤–∞ –≥—Ä–∏]"""
        args = utils.get_args_raw(message).strip()
        if not args:
            await utils.answer(message, "‚ùå <b>–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –≥—Ä–∏.</b>")
            return
        await utils.answer(message, self.strings["checking"])
        query = args.lower()
        appids = await self.get_popular_games()
        for appid in appids:
            game = await self.get_game_details(appid)
            if game and query in game["name"].lower():
                text = self.strings["specific_discount"].format(
                    name=game["name"],
                    original_price=game["original_price"],
                    final_price=game["final_price"],
                    discount_percent=game["discount_percent"],
                    appid=game["appid"]
                )
                await utils.answer(message, text, parse_mode="HTML")
                return
        await utils.answer(message, self.strings["no_results"])