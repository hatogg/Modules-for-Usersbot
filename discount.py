__version__ = (1, 3, 0)

import aiohttp
import logging
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class SteamDiscounts(loader.Module):
    """–í–∏–≤–æ–¥–∏—Ç—å —Ç–æ–ø 20 —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –≤ Steam (–£–∫—Ä–∞—ó–Ω–∞, UAH) —Ç–∞ –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é. –ê–≤—Ç–æ—Ä: X44TO (t.me/devx44to)"""

    strings = {
        "name": "SteamDiscounts by X44TO",
        "_cls_doc": "–í–∏–≤–æ–¥–∏—Ç—å —Ç–æ–ø 20 —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –≤ Steam (–£–∫—Ä–∞—ó–Ω–∞, UAH) —Ç–∞ –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é. –ê–≤—Ç–æ—Ä: X44TO (t.me/devx44to)",
        "no_discounts": "‚ÑπÔ∏è <b>–ù–µ–º–∞—î —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –Ω–∞—Ä–∞–∑—ñ.</b>",
        "error": "‚ùå <b>–ü–æ–º–∏–ª–∫–∞: {error}</b>",
        "checking": "üîÑ <b>–ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–Ω–∏–∂–∫–∏...</b>",
        "discount_list": "üõí <b>–¢–æ–ø 20 —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ (–£–∫—Ä–∞—ó–Ω–∞):</b>\n\n{list}",
        "no_results": "‚ùå <b>–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –Ω–∞–∑–≤–æ—é '{query}'.</b>",
        "specific_discount": "üõí <b>–ó–Ω–∏–∂–∫–∞ –Ω–∞ {name}:</b>\nüí∞ –ë–µ–∑ –∑–Ω–∏–∂–∫–∏: {original_price:.2f} –≥—Ä–Ω\nüí∏ –ó—ñ –∑–Ω–∏–∂–∫–æ—é: {final_price:.2f} –≥—Ä–Ω\nüìâ –ó–Ω–∏–∂–∫–∞: {discount_percent}%\nüîó https://store.steampowered.com/app/{appid}"
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    async def get_top_discounts(self):
        """–û—Ç—Ä–∏–º—É—î —Ç–æ–ø 20 —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –≤ UAH."""
        async with aiohttp.ClientSession() as session:
            url = "https://store.steampowered.com/api/featured?cc=ua&l=ukrainian"
            try:
                async with session.get(url) as resp:
                    if resp.status != 200:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ API: –°—Ç–∞—Ç—É—Å {resp.status}")
                        return None
                    data = await resp.json()
                    discounts = []
                    for game in data.get("featured_win", [])[:20]:  # –¢–æ–ø 20
                        if game.get("discount_percent", 0) > 0:
                            discounts.append({
                                "name": game.get("name", "Unknown"),
                                "original_price": game.get("original_price", 0) / 100,
                                "final_price": game.get("final_price", 0) / 100,
                                "discount_percent": game.get("discount_percent", 0),
                                "appid": game.get("id", 0)
                            })
                    return discounts
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ API: {e}")
                return None

    @loader.command()
    async def discounts(self, message):
        """–í–∏–≤–æ–¥–∏—Ç—å —Ç–æ–ø 20 —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –≤ UAH."""
        await utils.answer(message, self.strings["checking"])
        discounts = await self.get_top_discounts()
        if not discounts:
            await utils.answer(message, self.strings["no_discounts"])
            return
        discount_list = "\n".join([
            f"‚Ä¢ {game['name']}\n"
            f"   üí∞ –ë–µ–∑ –∑–Ω–∏–∂–∫–∏: {game['original_price']:.2f} –≥—Ä–Ω\n"
            f"   üí∏ –ó—ñ –∑–Ω–∏–∂–∫–æ—é: {game['final_price']:.2f} –≥—Ä–Ω\n"
            f"   üìâ –ó–Ω–∏–∂–∫–∞: {game['discount_percent']}%\n"
            f"   üîó https://store.steampowered.com/app/{game['appid']}"
            for game in discounts
        ])
        text = self.strings["discount_list"].format(list=discount_list)
        await utils.answer(message, text, parse_mode="HTML")

    @loader.command()
    async def discount(self, message):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–Ω–∏–∂–∫—É –Ω–∞ –≥—Ä—É –∑–∞ –Ω–∞–∑–≤–æ—é. –ê—Ä–≥—É–º–µ–Ω—Ç: [–Ω–∞–∑–≤–∞ –≥—Ä–∏]"""
        args = utils.get_args_raw(message).strip()
        if not args:
            await utils.answer(message, "‚ùå <b>–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –≥—Ä–∏.</b>")
            return
        await utils.answer(message, self.strings["checking"])
        query = args.lower()
        discounts = await self.get_top_discounts()
        if not discounts:
            await utils.answer(message, self.strings["no_discounts"])
            return
        for game in discounts:
            if query in game["name"].lower():
                text = self.strings["specific_discount"].format(
                    name=game["name"],
                    original_price=game["original_price"],
                    final_price=game["final_price"],
                    discount_percent=game["discount_percent"],
                    appid=game["appid"]
                )
                await utils.answer(message, text, parse_mode="HTML")
                return
        await utils.answer(message, self.strings["no_results"].format(query=query))