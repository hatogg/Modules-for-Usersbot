__version__ = (1, 2, 0)

import aiohttp
import logging
from telethon import events
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class SteamDiscounts(loader.Module):
    """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –≤ Steam (–£–∫—Ä–∞—ó–Ω–∞, UAH). –ê–≤—Ç–æ—Ä: X44TO (t.me/devx44to)"""

    strings = {
        "name": "SteamDiscounts by X44TO",
        "_cls_doc": "–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–æ–∫ —É Steam (–£–∫—Ä–∞—ó–Ω–∞, UAH). –ê–≤—Ç–æ—Ä: X44TO (t.me/devx44to)",
        "no_discounts": "‚ÑπÔ∏è <b>–ù–µ–º–∞—î —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ –Ω–∞—Ä–∞–∑—ñ.</b>",
        "error": "‚ùå <b>–ü–æ–º–∏–ª–∫–∞: {error}</b>",
        "checking": "üîÑ <b>–ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–Ω–∏–∂–∫–∏...</b>",
        "discount_list": "üõí <b>–Ü–≥—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ (–£–∫—Ä–∞—ó–Ω–∞, –¥–æ 10):</b>\n\n{list}",
        "no_results": "‚ùå <b>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º.</b>",
        "specific_discount": "üõí <b>–ó–Ω–∏–∂–∫–∞ –Ω–∞ {name}:</b>\nüí∞ –ë–µ–∑ –∑–Ω–∏–∂–∫–∏: {original_price:.2f} –≥—Ä–Ω\nüí∏ –ó—ñ –∑–Ω–∏–∂–∫–æ—é: {final_price:.2f} –≥—Ä–Ω\nüìâ –ó–Ω–∏–∂–∫–∞: {discount_percent}%\nüîó https://store.steampowered.com/app/{appid}",
        "invalid_genre": "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π –∂–∞–Ω—Ä. –°–ø—Ä–æ–±—É–π: RPG, Action, Shooter —Ç–æ—â–æ.</b>"
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    async def get_popular_games(self):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ AppID –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏."""
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get("https://store.steampowered.com/api/featured?cc=ua&l=ukrainian") as resp:
                    if resp.status != 200:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ API: –°—Ç–∞—Ç—É—Å {resp.status}")
                        return []
                    data = await resp.json()
                    # –ë–µ—Ä–µ–º–æ –ª–∏—à–µ —ñ–≥—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏
                    appids = [
                        str(game["id"]) for game in data.get("featured_win", [])
                        if game.get("discount_percent", 0) > 0
                    ]
                    return appids[:10]  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ 10
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —ñ–≥–æ—Ä: {e}")
                return []

    async def get_game_details(self, appid: str):
        """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—ñ –≥—Ä–∏, –≤–∫–ª—é—á–∞—é—á–∏ –∂–∞–Ω—Ä–∏."""
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"https://store.steampowered.com/api/appdetails?appids={appid}&cc=ua") as resp:
                    if resp.status != 200:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ API –¥–ª—è {appid}: –°—Ç–∞—Ç—É—Å {resp.status}")
                        return None
                    data = await resp.json()
                    game_data = data.get(appid, {}).get("data", {})
                    if game_data and "price_overview" in game_data and game_data.get("discount_percent", 0) > 0:
                        price_overview = game_data["price_overview"]
                        genres = ", ".join([genre["description"] for genre in game_data.get("genres", [])]) or "Unknown"
                        return {
                            "name": game_data.get("name", "Unknown"),
                            "original_price": price_overview.get("initial", 0) / 100,
                            "final_price": price_overview.get("final", 0) / 100,
                            "discount_percent": game_data.get("discount_percent", 0),
                            "appid": appid,
                            "genres": genres
                        }
                    return None
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó –≥—Ä–∏ {appid}: {e}")
                return None

    async def filter_by_genre(self,