__version__ = (1, 4, 0)

from telethon import events
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
from telethon.errors import UsernameInvalidError, PeerIdInvalidError
import logging
import re
import asyncio

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class SaveDeleted(loader.Module):
    """–ó–±–µ—Ä—ñ–≥–∞—î –≤–∏–¥–∞–ª–µ–Ω—ñ —Ç–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç. –ê–≤—Ç–æ—Ä: X44TO (t.me/devx44to)"""

    strings = {
        "name": "SaveDeleted by X44TO",
        "_cls_doc": "–ó–±–µ—Ä—ñ–≥–∞—î –≤–∏–¥–∞–ª–µ–Ω—ñ —Ç–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç. –ê–≤—Ç–æ—Ä: X44TO (t.me/devx44to)",
        "save_chat_not_set": "‚ùå <b>–ß–∞—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>.saveon [chat_id –∞–±–æ username –∞–±–æ t.me/username]</code>",
        "save_chat_set": "‚úÖ <b>–ß–∞—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {chat}</b>",
        "save_on": "üîÑ <b>–£–≤—ñ–º–∫–Ω–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É: {chat}</b>",
        "save_off": "üîÑ <b>–í–∏–º–∫–Ω–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É: {chat}</b>",
        "all_chats": "–í—Å—ñ —á–∞—Ç–∏ (–æ–∫—Ä—ñ–º –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∑ —Å–æ–±–æ—é)",
        "no_save_chat": "‚ùå <b>–ß–∞—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.</b>",
        "auto_created": "‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–∞—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: Saved Messages</b>\n–¢—É—Ç –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—è –≤–∏–¥–∞–ª–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
        "invalid_link": "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ ID. –°–ø—Ä–æ–±—É–π username, ID –∞–±–æ t.me/username.</b>",
    }

    def __init__(self):
        self.save_chat = None
        self.enabled_chats = []
        self.messages = {}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        me = await client.get_me()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        self.save_chat = self.get("save_chat", None)
        self.enabled_chats = self.get("enabled_chats", [])

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Ç—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        if self.save_chat is None:
            self.save_chat = me.id  # Saved Messages –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            self.set("save_chat", self.save_chat)
            try:
                await client.send_message(self.save_chat, "üóëÔ∏è <b>SaveDeleted by X44TO –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</b>\n–¢—É—Ç –±—É–¥—É—Ç—å –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è –≤–∏–¥–∞–ª–µ–Ω—ñ —Ç–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–≤–∏—Ö —á–∞—Ç—ñ–≤.")
                await utils.answer(self, self.strings["auto_created"])
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        else:
            try:
                entity = await client.get_entity(self.save_chat)
                self.strings["save_chat_set"] = self.strings["save_chat_set"].format(chat=utils.escape_html(entity.title or entity.first_name or "Saved Messages"))
            except:
                self.save_chat = me.id
                self.set("save_chat", self.save_chat)
                await client.send_message(self.save_chat, "üóëÔ∏è <b>SaveDeleted by X44TO –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</b>\n–¢—É—Ç –±—É–¥—É—Ç—å –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è –≤–∏–¥–∞–ª–µ–Ω—ñ —Ç–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–≤–∏—Ö —á–∞—Ç—ñ–≤.")
                await utils.answer(self, self.strings["auto_created"])

    def parse_entity_arg(self, arg: str):
        """–ü–∞—Ä—Å–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è get_entity: username, ID, t.me/username."""
        if not arg:
            return None
        arg = re.sub(r'^https?://', '', arg)
        if arg.startswith('t.me/'):
            arg = arg[5:]
        if arg.startswith('c/'):
            arg = arg.split('/')[-1]
        try:
            return int(arg)
        except ValueError:
            return arg

    @loader.command()
    async def saveon(self, message):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —á–∞—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –ê—Ä–≥—É–º–µ–Ω—Ç: [chat_id –∞–±–æ username –∞–±–æ t.me/username]"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["save_chat_not_set"])
            return
        parsed = self.parse_entity_arg(args)
        if parsed is None:
            await utils.answer(message, self.strings["invalid_link"])
            return
        try:
            entity = await self.client.get_entity(parsed)
            self.save_chat = entity.id
            self.set("save_chat", self.save_chat)
            chat_title = entity.title or entity.first_name or "Saved Messages"
            await utils.answer(message, self.strings["save_chat_set"].format(chat=utils.escape_html(chat_title)))
        except (UsernameInvalidError, PeerIdInvalidError):
            await utils.answer(message, self.strings["invalid_link"])
        except Exception as e:
            await utils.answer(message, f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞: {e}</b>")

    @loader.command()
    async def saveoff(self, message):
        """–í–∏–º–∏–∫–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
        self.save_chat = None
        self.set("save_chat", None)
        await utils.answer(message, "‚úÖ <b>–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.</b>")

    @loader.command()
    async def watchon(self, message):
        """–£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É. –ê—Ä–≥—É–º–µ–Ω—Ç: [chat_id –∞–±–æ username –∞–±–æ t.me/username]"""
        args = utils.get_args_raw(message)
        if not args:
            self.enabled_chats = []
            self.set("enabled_chats", self.enabled_chats)
            await utils.answer(message, self.strings["save_off"].format(chat=self.strings["all_chats"]))
            return
        parsed = self.parse_entity_arg(args)
        if parsed is None:
            await utils.answer(message, self.strings["invalid_link"])
            return
        try:
            entity = await self.client.get_entity(parsed)
            chat_id = entity.id
            if chat_id not in self.enabled_chats:
                self.enabled_chats.append(chat_id)
                self.set("enabled_chats", self.enabled_chats)
            chat_title = entity.title or entity.first_name or "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
            await utils.answer(message, self.strings["save_on"].format(chat=utils.escape_html(chat_title)))
        except (UsernameInvalidError, PeerIdInvalidError):
            await utils.answer(message, self.strings["invalid_link"])
        except Exception as e:
            await utils.answer(message, f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞: {e}</b>")

    @loader.command()
    async def watchoff(self, message):
        """–í–∏–º–∫–Ω—É—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É. –ê—Ä–≥—É–º–µ–Ω—Ç: [chat_id –∞–±–æ username –∞–±–æ t.me/username]"""
        args = utils.get_args_raw(message)
        if not args:
            self.enabled_chats = [0]
            self.set("enabled_chats", self.enabled_chats)
            await utils.answer(message, self.strings["save_on"].format(chat=self.strings["all_chats"]))
            return
        parsed = self.parse_entity_arg(args)
        if parsed is None:
            await utils.answer(message, self.strings["invalid_link"])
            return
        try:
            entity = await self.client.get_entity(parsed)
            chat_id = entity.id
            if chat_id in self.enabled_chats:
                self.enabled_chats.remove(chat_id)
                self.set("enabled_chats", self.enabled_chats)
            chat_title = entity.title or entity.first_name or "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
            await utils.answer(message, self.strings["save_off"].format(chat=utils.escape_html(chat_title)))
        except (UsernameInvalidError, PeerIdInvalidError):
            await utils.answer(message, self.strings["invalid_link"])
        except Exception as e:
            await utils.answer(message, f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞: {e}</b>")

    @loader.watcher("message")
    async def message_watcher(self, message):
        """–ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ç—Ä–µ–∫—ñ–Ω–≥—É."""
        if not self.save_chat:
            return
        chat_id = message.chat_id
        if self.enabled_chats and chat_id not in self.enabled_chats and 0 not in self.enabled_chats:
            return
        me_id = (await self.client.get_me()).id
        if chat_id == me_id:
            return

        msg_id = message.id
        if chat_id not in self.messages:
            self.messages[chat_id] = {}
        if len(self.messages[chat_id]) > 1000:
            oldest = min(self.messages[chat_id].keys())
            del self.messages[chat_id][oldest]

        self.messages[chat_id][msg_id] = message
        logger.debug(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {msg_id} –∑ —á–∞—Ç—É {chat_id}")

    @loader.watcher("message_deleted")
    async def deleted_watcher(self, event):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–¥–∞–ª–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
        if not self.save_chat:
            return
        chat_id = event.chat_id
        deleted_ids = event.deleted_ids  # –¶–µ —Å–ø–∏—Å–æ–∫ int/str
        if self.enabled_chats and chat_id not in self.enabled_chats and 0 not in self.enabled_chats:
            return

        for deleted_id in deleted_ids:
            msg_id = int(deleted_id) if isinstance(deleted_id, (str, int)) else deleted_id  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è str/int
            if chat_id in self.messages and msg_id in self.messages[chat_id]:
                orig_msg = self.messages[chat_id].pop(msg_id)
                try:
                    caption = f"üóëÔ∏è <b>–í–∏–¥–∞–ª–µ–Ω–æ –∑ —á–∞—Ç—É:</b> {utils.escape_html(await self.get_chat_title(chat_id))}\n<i>ID: {msg_id}</i>"
                    if orig_msg.media:
                        await self.client.send_file(self.save_chat, orig_msg.media, caption=caption)
                    else:
                        await self.client.send_message(self.save_chat, caption + f"\n\n{orig_msg.text or ''}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ: {e}")
                    await self.client.send_message(self.save_chat, f"üóëÔ∏è <b>–í–∏–¥–∞–ª–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É):</b> {msg_id} –∑ {chat_id}")

    @loader.watcher("message_edited")
    async def edited_watcher(self, event):
        """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
        if not self.save_chat:
            return
        chat_id = event.chat_id
        if self.enabled_chats and chat_id not in self.enabled_chats and 0 not in self.enabled_chats:
            return

        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: event.message –º–æ–∂–µ –±—É—Ç–∏ str (ID) –∞–±–æ Message
        if isinstance(event.message, str) or isinstance(event.message, int):
            msg_id = int(event.message)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –Ω–∞–ø—Ä—è–º—É
            edited_msg = None  # –ù–µ –º–∞—î–º–æ –ø–æ–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ
            logger.warning(f"Lightweight edit event –¥–ª—è ID {msg_id} ‚Äî –Ω–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ")
        else:
            msg_id = event.message.id
            edited_msg = event.message

        if chat_id in self.messages and msg_id in self.messages[chat_id]:
            orig_msg = self.messages[chat_id][msg_id]
            try:
                if edited_msg:  # –¢—ñ–ª—å–∫–∏ —è–∫—â–æ –º–∞—î–º–æ –ø–æ–≤–Ω–µ —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    caption = f"‚úèÔ∏è <b>–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ –≤ —á–∞—Ç—ñ:</b> {utils.escape_html(await self.get_chat_title(chat_id))}\n<i>ID: {msg_id}</i>\n\n<b>–û—Ä–∏–≥—ñ–Ω–∞–ª:</b>\n{orig_msg.text or '[–ú–µ–¥—ñ–∞]'}"
                    if orig_msg.media:
                        await self.client.send_file(self.save_chat, orig_msg.media, caption=caption)
                    else:
                        await self.client.send_message(self.save_chat, caption)
                    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ
                    self.messages[chat_id][msg_id] = edited_msg
                else:
                    logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–ª—è {msg_id} (lightweight event)")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ–≥–æ: {e}")

    async def get_chat_title(self, chat_id):
        """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–∑–≤–∏ —á–∞—Ç—É."""
        try:
            entity = await self.client.get_entity(chat_id)
            return entity.title or entity.first_name or "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
        except:
            return f"ID {chat_id}"