import requests
from datetime import datetime
from .. import loader, utils

# –ú–æ–¥—É–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ X44To –¥–ª—è —é–∑–µ—Ä–±–æ—Ç–∞ Hikka

class WeatherModule(loader.Module):
    """–ü–æ–∫–∞–∑—É—î –ø–æ–≥–æ–¥—É –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–æ–º—É –º—ñ—Å—Ç—ñ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤. –°—Ç–≤–æ—Ä–µ–Ω–æ X44To"""
    strings = {
        "name": "–ü–æ–≥–æ–¥–∞",
        "no_city": "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.",
        "fetch_error": "‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    }

    # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –æ–ø–∏—Å—ñ–≤ –ø–æ–≥–æ–¥–∏
    weather_translations = {
        "clear sky": "—è—Å–Ω–æ",
        "few clouds": "–Ω–µ–≤–µ–ª–∏–∫–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å",
        "scattered clouds": "—Ä–æ–∑—Å—ñ—è–Ω—ñ —Ö–º–∞—Ä–∏",
        "broken clouds": "—Ö–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏",
        "overcast clouds": "–ø–æ—Ö–º—É—Ä–æ",
        "light rain": "–ª–µ–≥–∫–∏–π –¥–æ—â",
        "moderate rain": "–ø–æ–º—ñ—Ä–Ω–∏–π –¥–æ—â",
        "heavy intensity rain": "—Å–∏–ª—å–Ω–∏–π –¥–æ—â",
        "very heavy rain": "–¥—É–∂–µ —Å–∏–ª—å–Ω–∏–π –¥–æ—â",
        "extreme rain": "–µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π –¥–æ—â",
        "freezing rain": "–∫—Ä–∏–∂–∞–Ω–∏–π –¥–æ—â",
        "light intensity shower rain": "–ª–µ–≥–∫–∏–π –∑–ª–∏–≤–æ–≤–∏–π –¥–æ—â",
        "shower rain": "–∑–ª–∏–≤–æ–≤–∏–π –¥–æ—â",
        "heavy intensity shower rain": "—Å–∏–ª—å–Ω–∏–π –∑–ª–∏–≤–æ–≤–∏–π –¥–æ—â",
        "ragged shower rain": "–Ω–µ—Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∏–π –∑–ª–∏–≤–æ–≤–∏–π –¥–æ—â",
        "light snow": "–ª–µ–≥–∫–∏–π —Å–Ω—ñ–≥",
        "snow": "—Å–Ω—ñ–≥",
        "heavy snow": "—Å–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥",
        "sleet": "–º–æ–∫—Ä–∏–π —Å–Ω—ñ–≥",
        "light shower sleet": "–ª–µ–≥–∫–∏–π –º–æ–∫—Ä–∏–π —Å–Ω—ñ–≥",
        "shower sleet": "–º–æ–∫—Ä–∏–π —Å–Ω—ñ–≥ –∑ –¥–æ—â–µ–º",
        "light rain and snow": "–ª–µ–≥–∫–∏–π –¥–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º",
        "rain and snow": "–¥–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º",
        "light shower snow": "–ª–µ–≥–∫–∏–π —Å–Ω—ñ–≥–æ–ø–∞–¥",
        "shower snow": "—Å–Ω—ñ–≥–æ–ø–∞–¥",
        "heavy shower snow": "—Å–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥–æ–ø–∞–¥",
        "mist": "—Ç—É–º–∞–Ω",
        "smoke": "–¥–∏–º",
        "haze": "—Å–µ—Ä–ø–∞–Ω–æ–∫",
        "sand/dust whirls": "–ø—ñ—â–∞–Ω—ñ/–ø–∏–ª–æ–≤—ñ –≤–∏—Ö–æ—Ä–∏",
        "fog": "—Ç—É–º–∞–Ω",
        "sand": "–ø—ñ—Å–æ–∫",
        "dust": "–ø–∏–ª",
        "volcanic ash": "–≤—É–ª–∫–∞–Ω—ñ—á–Ω–∏–π –ø–æ–ø—ñ–ª",
        "squalls": "—à–∫–≤–∞–ª–∏",
        "tornado": "—Ç–æ—Ä–Ω–∞–¥–æ",
        "thunderstorm with light rain": "–≥—Ä–æ–∑–∞ –∑ –ª–µ–≥–∫–∏–º –¥–æ—â–µ–º",
        "thunderstorm with rain": "–≥—Ä–æ–∑–∞ –∑ –¥–æ—â–µ–º",
        "thunderstorm with heavy rain": "–≥—Ä–æ–∑–∞ –∑ —Å–∏–ª—å–Ω–∏–º –¥–æ—â–µ–º",
        "light thunderstorm": "–ª–µ–≥–∫–∞ –≥—Ä–æ–∑–∞",
        "thunderstorm": "–≥—Ä–æ–∑–∞",
        "heavy thunderstorm": "—Å–∏–ª—å–Ω–∞ –≥—Ä–æ–∑–∞",
        "ragged thunderstorm": "–Ω–µ—Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∞ –≥—Ä–æ–∑–∞",
        "thunderstorm with light drizzle": "–≥—Ä–æ–∑–∞ –∑ –ª–µ–≥–∫–æ—é –º—Ä—è–∫–æ—é",
        "thunderstorm with drizzle": "–≥—Ä–æ–∑–∞ –∑ –º—Ä—è–∫–æ—é",
        "thunderstorm with heavy drizzle": "–≥—Ä–æ–∑–∞ –∑ —Å–∏–ª—å–Ω–æ—é –º—Ä—è–∫–æ—é",
        "light intensity drizzle": "–ª–µ–≥–∫–∞ –º—Ä—è–∫–∞",
        "drizzle": "–º—Ä—è–∫–∞",
        "heavy intensity drizzle": "—Å–∏–ª—å–Ω–∞ –º—Ä—è–∫–∞",
        "light intensity drizzle rain": "–ª–µ–≥–∫–∞ –º—Ä—è–∫–∞ –∑ –¥–æ—â–µ–º",
        "drizzle rain": "–º—Ä—è–∫–∞ –∑ –¥–æ—â–µ–º",
        "heavy intensity drizzle rain": "—Å–∏–ª—å–Ω–∞ –º—Ä—è–∫–∞ –∑ –¥–æ—â–µ–º",
        "shower rain and drizzle": "–∑–ª–∏–≤–æ–≤–∞ –º—Ä—è–∫–∞ –∑ –¥–æ—â–µ–º",
        "heavy shower rain and drizzle": "—Å–∏–ª—å–Ω–∞ –∑–ª–∏–≤–æ–≤–∞ –º—Ä—è–∫–∞ –∑ –¥–æ—â–µ–º",
        "shower drizzle": "–∑–ª–∏–≤–æ–≤–∞ –º—Ä—è–∫–∞",
        # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –æ–ø–∏—Å–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "API_KEY", "a02c91969383c2bd1cf56a292977f67b", lambda m: "–í–∞—à API-–∫–ª—é—á –≤—ñ–¥ OpenWeatherMap",
            "UNITS", "metric", lambda m: "–û–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É: metric (Celsius) –∞–±–æ imperial (Fahrenheit)"
        )

    def get_weather(self, city):
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={self.config['API_KEY']}&units={self.config['UNITS']}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            description = data["weather"][0]["description"]
            # –ü–µ—Ä–µ–∫–ª–∞–¥ –æ–ø–∏—Å—É –ø–æ–≥–æ–¥–∏
            translated_description = self.weather_translations.get(description.lower(), description)
            temp_unit = "¬∞C" if self.config['UNITS'] == "metric" else "¬∞F"
            wind_unit = "–º/—Å" if self.config['UNITS'] == "metric" else "–º–∏–ª—å/–≥–æ–¥"
            weather = {
                "city": data["name"],
                "temperature": data["main"]["temp"],
                "description": translated_description,
                "humidity": data["main"]["humidity"],
                "wind_speed": data["wind"]["speed"],
                "pressure": data["main"]["pressure"],
                "visibility": data.get("visibility", "–ù/–î") / 1000 if data.get("visibility") else "–ù/–î",
                "temp_unit": temp_unit,
                "wind_unit": wind_unit
            }
            return weather
        else:
            return None

    def get_forecast(self, city):
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={self.config['API_KEY']}&units={self.config['UNITS']}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            forecast = []
            temp_unit = "¬∞C" if self.config['UNITS'] == "metric" else "¬∞F"
            for item in data["list"][::8]:  # –ö–æ–∂–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ (8 * 3 –≥–æ–¥–∏–Ω–∏ = 24)
                date = datetime.fromtimestamp(item["dt"]).strftime("%Y-%m-%d")
                description = item["weather"][0]["description"]
                translated_description = self.weather_translations.get(description.lower(), description)
                forecast.append({
                    "date": date,
                    "temperature": item["main"]["temp"],
                    "description": translated_description,
                    "temp_unit": temp_unit
                })
            return forecast
        else:
            return None

    @loader.command()
    async def weathercmd(self, message):
        """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–æ–º—É –º—ñ—Å—Ç—ñ. –°—Ç–≤–æ—Ä–µ–Ω–æ X44To"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_city"])
            return

        city = args
        weather = self.get_weather(city)

        if weather:
            reply = (
                f"üåÜ –ü–æ–≥–æ–¥–∞ –≤ {weather['city']}:\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temperature']}{weather['temp_unit']}\n"
                f"üå§Ô∏è –û–ø–∏—Å: {weather['description']}\n"
                f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {weather['humidity']}%\n"
                f"üí® –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {weather['wind_speed']} {weather['wind_unit']}\n"
                f"üïõ –¢–∏—Å–∫: {weather['pressure']} –≥–ü–∞\n"
                f"üëÄ –í–∏–¥–∏–º—ñ—Å—Ç—å: {weather['visibility']} –∫–º"
            )
        else:
            reply = self.strings["fetch_error"]

        await utils.answer(message, reply)

    @loader.command()
    async def forecastcmd(self, message):
        """–ü–æ–∫–∞–∑—É—î –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 5 –¥–Ω—ñ–≤ —É –∑–∞–∑–Ω–∞—á–µ–Ω–æ–º—É –º—ñ—Å—Ç—ñ. –°—Ç–≤–æ—Ä–µ–Ω–æ X44To"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_city"])
            return

        city = args
        forecast = self.get_forecast(city)

        if forecast:
            reply = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –≤ {city} –Ω–∞ 5 –¥–Ω—ñ–≤:\n\n"
            for day in forecast:
                reply += (
                    f"üìÜ {day['date']}:\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['temperature']}{day['temp_unit']}\n"
                    f"üå§Ô∏è –û–ø–∏—Å: {day['description']}\n\n"
                )
        else:
            reply = self.strings["fetch_error"]

        await utils.answer(message, reply)